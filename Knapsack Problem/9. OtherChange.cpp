/*以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取到的最大价值，
但背包问题还有很多种灵活的问法，
但其他问题基本都可以由以上的问题去转化而成。
*/


1.要求输出最优的方案
如果要求输出这个最优值的方案，
可以参照一般动态规划问题输出方案的方法：
记录下每个状态的最优值是由状态转移方程的哪一项推出来的，
换句话说，记录下它是由哪一个策略推出来的。
便可根据这条策略找到上一个状态，
从上一个状态接着向前推即可。

2.输出字典序最小的最优方案
一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。

3.求方案总数
对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）的背包问题，
除了再给定每个物品的价值后求可得到的最大价值外，
还可以得到装满背包或将背包装至某一指定容量的方案总数。
这个就在转移方案里面不断累加就行了。

4.最优方案的总数
这里的最优方案是指物品总价值最大的方案。以01 背包为例。
结合求最大总价值和方案总数两个问题的思路，
最优方案的总数可以这样求：F[i, v] 代表该状态的最大价值，
G[i, v] 表示这个子问题的最优方案的总数，
单独设一个数组去存储有多少个最优的
伪代码：
G[0,0] = 1
for i=1 to N
	for v=0 to v
		F[i,v] = max(f[i-1,v], F[i-1][v-C[i]]+w[i])
		G[i,v] = 0
	if F[i,v] == F[i-1,v]
		G[i,v] = G[i,v] + G[i-1][v]
	if F[i,v] = F[i-1, v-C[i]]+w[i]
		G[i,v] = G[i,v] + G[i-1][v-C[i]]


5.求次优解，第K优解
对于求次优解、第K 优解类的问题，
如果相应的最优解问题能写出状态转移方程、用动态规划解决，
那么求次优解往往可以相同的复杂度解决，
第K 优解则比求最优解的复杂度上多一个系数K。
其基本思想是，将每个状态都表示成有序队列，
将状态转移方程中的max/min 转化成有序队列的合并。

